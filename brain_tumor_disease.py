# -*- coding: utf-8 -*-
"""Brain_Tumor_Disease.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1B_shUgSkL3kn1YVBIMZqos2LIvvT7dio
"""

import tensorflow as tf

import kagglehub

# Download latest version
path = kagglehub.dataset_download("masoudnickparvar/brain-tumor-mri-dataset")

print("Path to dataset files:", path)

!cp -r /root/.cache/kagglehub/datasets/masoudnickparvar/brain-tumor-mri-dataset/versions/1 .

import os
import shutil


train_folder = "/content/1/Training"
test_folder = "/content/1/Testing"
merged_folder = "/content/Merged"


os.makedirs(merged_folder, exist_ok=True)


class_names = os.listdir(train_folder)


for class_name in class_names:
    train_class_path = os.path.join(train_folder, class_name)
    test_class_path = os.path.join(test_folder, class_name)
    merged_class_path = os.path.join(merged_folder, class_name)

    os.makedirs(merged_class_path, exist_ok=True)


    if os.path.exists(train_class_path):
        for file in os.listdir(train_class_path):
            shutil.copy(os.path.join(train_class_path, file), os.path.join(merged_class_path, file))


    if os.path.exists(test_class_path):
        for file in os.listdir(test_class_path):
            shutil.copy(os.path.join(test_class_path, file), os.path.join(merged_class_path, file))

print("Merging completed successfully!")

trainig_data_path = '/content/Merged'

train_ds = tf.keras.preprocessing.image_dataset_from_directory(
    trainig_data_path,
    validation_split=0.3,
    subset="training",
    seed=1337,
    image_size=(150, 150),
    batch_size=32
)

val_ds = tf.keras.preprocessing.image_dataset_from_directory(
    trainig_data_path,
    validation_split=0.3,
    subset="validation",
    seed=1337,
    image_size=(150, 150),
    batch_size=32
)

train_ds.class_names

for batch, labels in train_ds:
  print(batch.shape)
  print(labels.shape)
  break

normalization_layer = tf.keras.layers.Rescaling(1./255)
train_ds = train_ds.map(lambda x, y: (normalization_layer(x), y))

image_batch, labels_batch = next(iter(train_ds))

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout, BatchNormalization
from tensorflow.keras.preprocessing.image import ImageDataGenerator

model = Sequential([
    Conv2D(32, (3, 3), activation="relu", input_shape=(150, 150, 3)),
    BatchNormalization(),
    MaxPooling2D(pool_size=(2, 2)),

    Conv2D(64, (3, 3), activation="relu"),
    BatchNormalization(),
    MaxPooling2D(pool_size=(2, 2)),

    Conv2D(128, (3, 3), activation="relu"),
    BatchNormalization(),
    MaxPooling2D(pool_size=(2, 2)),

    Conv2D(256, (3, 3), activation="relu"),
    BatchNormalization(),
    MaxPooling2D(pool_size=(2, 2)),

    Flatten(),
    Dense(256, activation="relu"),
    Dropout(0.5),
    Dense(128, activation="relu"),
    Dropout(0.3),
    Dense(4, activation="softmax")
])

model.compile(
    optimizer=tf.keras.optimizers.Adam(learning_rate=0.0001),
    loss="sparse_categorical_crossentropy",
    metrics=["accuracy"]
)

train_datagen = ImageDataGenerator(
    rescale=1./255,
    validation_split=0.3,
    rotation_range=20,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True
)

val_datagen = ImageDataGenerator(rescale=1./255, validation_split=0.3)

train_ds = train_datagen.flow_from_directory(
    "/content/Merged",
    target_size=(150, 150),
    batch_size=32,
    class_mode="sparse",
    subset="training"
)

val_ds = val_datagen.flow_from_directory(
    "/content/Merged",
    target_size=(150, 150),
    batch_size=32,
    class_mode="sparse",
    subset="validation"
)

from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint

early_stopping = EarlyStopping(monitor="val_loss", patience=5, restore_best_weights=True)

model_checkpoint = ModelCheckpoint("best_cnn_model.h5", save_best_only=True)

model.compile(
    optimizer=tf.keras.optimizers.Adam(learning_rate=0.0001),
    loss="sparse_categorical_crossentropy",
    metrics=["accuracy"]
)

history = model.fit(
    train_ds,
    validation_data=val_ds,
    epochs=7,
    callbacks=[early_stopping, model_checkpoint]
)

import cv2
import numpy as np
import matplotlib.pyplot as plt
def predict_image(image_path):
    img_size = 150
    img = cv2.imread(image_path)
    img = cv2.resize(img, (img_size, img_size))
    img = img / 255.0
    img = np.expand_dims(img, axis=0)

    prediction = model.predict(img)
    predicted_class = np.argmax(prediction)

    class_labels = ["No Tumor", "Glioma", "Meningioma", "Pituitary"]

    print(f"Predicted Class: {predicted_class}")
    print(f"Prediction Confidence: {prediction[0][predicted_class]:.2f}")
    print(f"Predicted Tumor Type: {class_labels[predicted_class]}")

    plt.imshow(cv2.cvtColor(cv2.imread(image_path), cv2.COLOR_BGR2RGB))
    plt.title(f"Prediction: {class_labels[predicted_class]}")
    plt.axis("off")
    plt.show()

# Example usage
predict_image("/content/DALLÂ·E 2025-03-11 22.57.56 - A simulated MRI scan of a human brain with a highlighted tumor area. The image should resemble a grayscale medical scan with a circular or irregularly.webp")  # Replace with your MRI image